{
  "version": 3,
  "sources": ["../../../src/lib/app-type/abstract.ts"],
  "sourcesContent": ["import { AwtrixLight } from '../../main';\nimport { DefaultApp } from '../adapter-config';\nimport { AwtrixApi } from '../api';\n\nexport namespace AppType {\n    export abstract class AbstractApp {\n        private definition: DefaultApp;\n\n        protected apiClient: AwtrixApi.Client;\n        protected adapter: AwtrixLight;\n        protected isVisible: boolean;\n\n        public constructor(apiClient: AwtrixApi.Client, adapter: AwtrixLight, definition: DefaultApp) {\n            this.apiClient = apiClient;\n            this.adapter = adapter;\n            this.definition = definition;\n            this.isVisible = false;\n\n            adapter.on('stateChange', this.onStateChange.bind(this));\n            adapter.on('objectChange', this.onObjectChange.bind(this));\n        }\n\n        public getName(): string {\n            return this.definition.name;\n        }\n\n        public async init(): Promise<boolean> {\n            const appName = this.getName();\n            const appVisibleState = await this.adapter.getStateAsync(`apps.${appName}.visible`);\n            this.isVisible = appVisibleState ? !!appVisibleState.val : true;\n\n            // Ack if changed while instance was stopped\n            if (appVisibleState && !appVisibleState?.ack) {\n                await this.adapter.setStateAsync(`apps.${appName}.visible`, { val: this.isVisible, ack: true, c: 'initCustomApp' });\n            }\n\n            return this.isVisible;\n        }\n\n        public async refresh(): Promise<boolean> {\n            if (!this.isVisible && this.apiClient.isConnected()) {\n                // Hide app automatically\n                const appName = this.getName();\n                this.apiClient.removeAppAsync(appName).catch((error) => {\n                    this.adapter.log.warn(`[refreshApp] Unable to remove hidden app \"${appName}\": ${error}`);\n                });\n            }\n\n            return this.isVisible && this.apiClient.isConnected();\n        }\n\n        public async createObjects(): Promise<void> {\n            const appName = this.getName();\n\n            await this.adapter.setObjectNotExistsAsync(`apps.${appName}.visible`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Visible',\n                        de: 'Sichtbar',\n                        ru: '\u0412\u0438\u0434\u0438\u043C\u044B\u0439',\n                        pt: 'Vis\u00EDvel',\n                        nl: 'Vertaling',\n                        fr: 'Visible',\n                        it: 'Visibile',\n                        es: 'Visible',\n                        pl: 'Widoczny',\n                        //uk: '\u0412\u0438\u0431\u0440\u0430\u043D\u0456',\n                        'zh-cn': '\u4E0D\u53EF\u6297\u8FA9',\n                    },\n                    type: 'boolean',\n                    role: 'switch.enable',\n                    read: true,\n                    write: true,\n                    def: true,\n                },\n                native: {},\n            });\n        }\n\n        public async unloadAsync(): Promise<void> {\n            if (this.adapter.config.removeAppsOnStop) {\n                this.adapter.log.info(`[onUnload] Deleting app on awtrix light with name \"${this.definition.name}\"`);\n\n                try {\n                    await this.apiClient.removeAppAsync(this.definition.name).catch((error) => {\n                        this.adapter.log.warn(`Unable to remove unknown app \"${this.definition.name}\": ${error}`);\n                    });\n                } catch (error) {\n                    this.adapter.log.error(`[onUnload] Unable to delete app ${this.definition.name}: ${error}`);\n                }\n            }\n        }\n\n        private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n            const idNoNamespace = this.adapter.removeNamespace(id);\n            const appName = this.getName();\n\n            // Handle default states for all apps\n            if (id && state && !state.ack) {\n                if (idNoNamespace == `apps.${appName}.visible`) {\n                    if (state.val !== this.isVisible) {\n                        this.adapter.log.debug(`[onStateChange] changed visibility of app ${appName} to ${state.val}`);\n\n                        this.isVisible = !!state.val;\n                        if (await this.refresh()) {\n                            await this.adapter.setStateAsync(idNoNamespace, { val: state.val, ack: true, c: 'onStateChange' });\n                        }\n                    } else {\n                        this.adapter.log.debug(`[onStateChange] visibility of app ${appName} was already ${state.val} - ignoring`);\n\n                        await this.adapter.setStateAsync(idNoNamespace, { val: state.val, ack: true, c: 'onStateChange (unchanged)' });\n                    }\n                }\n            }\n\n            await this.stateChanged(id, state);\n        }\n\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        protected async stateChanged(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n            // override\n        }\n\n        private async onObjectChange(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n            await this.objectChanged(id, obj);\n        }\n\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        protected async objectChanged(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n            // override\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["AppType"]
}
