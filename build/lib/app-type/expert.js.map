{
  "version": 3,
  "sources": ["../../../src/lib/app-type/expert.ts"],
  "sourcesContent": ["import { AwtrixLight } from '../../main';\nimport { ExpertApp } from '../adapter-config';\nimport { AwtrixApi } from '../api';\nimport { AppType as AbstractAppType } from './abstract';\n\nexport namespace AppType {\n    export class Expert extends AbstractAppType.AbstractApp {\n        private appDefinition: ExpertApp;\n        private appStates: { [key: string]: ioBroker.StateValue };\n        private refreshTimeout: void | NodeJS.Timeout | null;\n\n        public constructor(apiClient: AwtrixApi.Client, adapter: AwtrixLight, definition: ExpertApp) {\n            super(apiClient, adapter, definition);\n\n            this.appDefinition = definition;\n            this.appStates = {};\n            this.refreshTimeout = null;\n        }\n\n        public override async init(): Promise<boolean> {\n            const appName = this.getName();\n\n            const appObjects = await this.adapter.getObjectViewAsync('system', 'state', {\n                startkey: `${this.adapter.namespace}.apps.${appName}.`,\n                endkey: `${this.adapter.namespace}.apps.${appName}.\\u9999`,\n            });\n\n            // Find all available settings objects with settingsKey\n            for (const appObj of appObjects.rows) {\n                if (appObj.value?.native?.attribute) {\n                    const appState = await this.adapter.getStateAsync(appObj.id);\n                    if (appState) {\n                        this.appStates[appObj.value.native.attribute] = appState.val;\n                    }\n                }\n            }\n\n            this.adapter.log.debug(`[initExpertApp] current states of app \"${appName}\": ${JSON.stringify(this.appStates)}`);\n\n            return super.init();\n        }\n\n        public override async refresh(): Promise<boolean> {\n            let refreshed = false;\n\n            if (await super.refresh()) {\n                this.adapter.log.debug(`[refresh] Refreshing app with values \"${this.appDefinition.name}\": ${JSON.stringify(this.appStates)}`);\n\n                await this.apiClient!.appRequestAsync(this.appDefinition.name, {\n                    text: typeof this.appStates.text === 'string' ? this.appStates.text : '',\n                    color: typeof this.appStates.color === 'string' ? this.appStates.color : '#FFFFFF',\n                    background: typeof this.appStates.background === 'string' ? this.appStates.background : '#000000',\n                    icon: typeof this.appStates.icon === 'string' ? this.appStates.icon : '',\n                    duration: typeof this.appStates.duration === 'number' ? this.appStates.duration : 0,\n                }).catch((error) => {\n                    this.adapter.log.warn(`(custom?name=${this.appDefinition.name}) Unable to update custom app \"${this.appDefinition.name}\": ${error}`);\n                });\n\n                refreshed = true;\n            }\n\n            return refreshed;\n        }\n\n        public async createObjects(): Promise<void> {\n            const appName = this.getName();\n\n            await this.adapter.setObjectNotExistsAsync(`apps.${appName}.text`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Text',\n                        de: 'Text',\n                        ru: '\u0422\u0435\u043A\u0441\u0442',\n                        pt: 'Texto',\n                        nl: 'Text',\n                        fr: 'Texte',\n                        it: 'Testo',\n                        es: 'Texto',\n                        pl: 'Tekst',\n                        //uk: '\u0413\u043E\u043B\u043E\u0432\u043D\u0430',\n                        'zh-cn': '\u6848\u6587',\n                    },\n                    type: 'string',\n                    role: 'text',\n                    read: true,\n                    write: true,\n                    def: '',\n                },\n                native: {\n                    attribute: 'text',\n                },\n            });\n\n            await this.adapter.setObjectNotExistsAsync(`apps.${appName}.textColor`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Text color',\n                        de: 'Textfarbe',\n                        ru: '\u0422\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u0439 \u0446\u0432\u0435\u0442',\n                        pt: 'Cor do texto',\n                        nl: 'Tekstkleur',\n                        fr: 'Couleur du texte',\n                        it: 'Colore del testo',\n                        es: 'Color de texto',\n                        pl: 'Kolor tekstu',\n                        //uk: '\u041A\u043E\u043B\u0456\u0440 \u0442\u0435\u043A\u0441\u0442\u0443',\n                        'zh-cn': '\u6587\u672C\u989C\u8272',\n                    },\n                    type: 'string',\n                    role: 'level.color.rgb',\n                    read: true,\n                    write: true,\n                    def: '#FFFFFF',\n                },\n                native: {\n                    attribute: 'color',\n                },\n            });\n\n            await this.adapter.setObjectNotExistsAsync(`apps.${appName}.backgroundColor`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Background color',\n                        de: 'Hintergrundfarbe',\n                        ru: '\u0424\u043E\u043D\u043E\u0432\u044B\u0439 \u0446\u0432\u0435\u0442',\n                        pt: 'Cor de fundo',\n                        nl: 'Achtergrondkleur',\n                        fr: 'Couleur de fond',\n                        it: 'Colore dello sfondo',\n                        es: 'Color de fondo',\n                        pl: 'Kolor t\u0142a',\n                        //uk: '\u041A\u043E\u043B\u0456\u0440 \u0444\u043E\u043D\u0443',\n                        'zh-cn': '\u80CC\u666F\u989C\u8272',\n                    },\n                    type: 'string',\n                    role: 'level.color.rgb',\n                    read: true,\n                    write: true,\n                    def: '#000000',\n                },\n                native: {\n                    attribute: 'background',\n                },\n            });\n\n            await this.adapter.setObjectNotExistsAsync(`apps.${appName}.icon`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Icon',\n                        de: 'Symbol',\n                        ru: '\u0418\u043C\u044F',\n                        pt: '\u00CDcone',\n                        nl: 'Icoon',\n                        fr: 'Ic\u00F4ne',\n                        it: 'Icona',\n                        es: 'Icono',\n                        pl: 'Ikona',\n                        //uk: '\u0437\u043D\u0430\u0447\u043E\u043A',\n                        'zh-cn': '\u56FE\u6807',\n                    },\n                    type: 'string',\n                    role: 'text',\n                    read: true,\n                    write: true,\n                    def: '',\n                },\n                native: {\n                    attribute: 'icon',\n                },\n            });\n\n            await this.adapter.setObjectNotExistsAsync(`apps.${appName}.duration`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Icon',\n                        de: 'Symbol',\n                        ru: '\u0418\u043C\u044F',\n                        pt: '\u00CDcone',\n                        nl: 'Icoon',\n                        fr: 'Ic\u00F4ne',\n                        it: 'Icona',\n                        es: 'Icono',\n                        pl: 'Ikona',\n                        //uk: '\u0437\u043D\u0430\u0447\u043E\u043A',\n                        'zh-cn': '\u56FE\u6807',\n                    },\n                    type: 'number',\n                    role: 'value',\n                    read: true,\n                    write: true,\n                    def: 0,\n                },\n                native: {\n                    attribute: 'duration',\n                },\n            });\n\n            return super.createObjects();\n        }\n\n        protected override async stateChanged(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n            const idNoNamespace = this.adapter.removeNamespace(id);\n            const appName = this.getName();\n\n            // Handle default states for all apps\n            if (id && state && !state.ack) {\n                if (idNoNamespace.startsWith(`apps.${appName}.`)) {\n                    const obj = await this.adapter.getObjectAsync(idNoNamespace);\n\n                    if (obj && obj?.native?.attribute) {\n                        const attr = obj.native.attribute as string;\n                        if (this.appStates[attr] !== state.val) {\n                            this.adapter.log.debug(`[onStateChange] New value for expert app \"${appName}\": \"${state.val}\" (${obj?.native?.attribute})`);\n\n                            this.appStates[attr] = state.val;\n\n                            if (!this.refreshTimeout) {\n                                this.refreshTimeout = this.adapter.setTimeout(async () => {\n                                    this.refreshTimeout = null;\n\n                                    if (await this.refresh()) {\n                                        await this.adapter.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                                    }\n                                }, 100);\n                            } else {\n                                await this.adapter.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                            }\n                        } else {\n                            this.adapter.log.debug(`[onStateChange] New value for expert app \"${appName}\" IGNORED (not changed): \"${state.val}\" (${obj?.native?.attribute})`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,sBAA2C;AAEpC,IAAU;AAAA,CAAV,CAAUA,aAAV;AACI,QAAM,eAAe,gBAAAC,QAAgB,YAAY;AAAA,IAK7C,YAAY,WAA6B,SAAsB,YAAuB;AACzF,YAAM,WAAW,SAAS,UAAU;AAEpC,WAAK,gBAAgB;AACrB,WAAK,YAAY,CAAC;AAClB,WAAK,iBAAiB;AAAA,IAC1B;AAAA,IAEA,MAAsB,OAAyB;AAnBvD;AAoBY,YAAM,UAAU,KAAK,QAAQ;AAE7B,YAAM,aAAa,MAAM,KAAK,QAAQ,mBAAmB,UAAU,SAAS;AAAA,QACxE,UAAU,GAAG,KAAK,QAAQ,kBAAkB;AAAA,QAC5C,QAAQ,GAAG,KAAK,QAAQ,kBAAkB;AAAA,MAC9C,CAAC;AAGD,iBAAW,UAAU,WAAW,MAAM;AAClC,aAAI,kBAAO,UAAP,mBAAc,WAAd,mBAAsB,WAAW;AACjC,gBAAM,WAAW,MAAM,KAAK,QAAQ,cAAc,OAAO,EAAE;AAC3D,cAAI,UAAU;AACV,iBAAK,UAAU,OAAO,MAAM,OAAO,aAAa,SAAS;AAAA,UAC7D;AAAA,QACJ;AAAA,MACJ;AAEA,WAAK,QAAQ,IAAI,MAAM,0CAA0C,aAAa,KAAK,UAAU,KAAK,SAAS,GAAG;AAE9G,aAAO,MAAM,KAAK;AAAA,IACtB;AAAA,IAEA,MAAsB,UAA4B;AAC9C,UAAI,YAAY;AAEhB,UAAI,MAAM,MAAM,QAAQ,GAAG;AACvB,aAAK,QAAQ,IAAI,MAAM,yCAAyC,KAAK,cAAc,UAAU,KAAK,UAAU,KAAK,SAAS,GAAG;AAE7H,cAAM,KAAK,UAAW,gBAAgB,KAAK,cAAc,MAAM;AAAA,UAC3D,MAAM,OAAO,KAAK,UAAU,SAAS,WAAW,KAAK,UAAU,OAAO;AAAA,UACtE,OAAO,OAAO,KAAK,UAAU,UAAU,WAAW,KAAK,UAAU,QAAQ;AAAA,UACzE,YAAY,OAAO,KAAK,UAAU,eAAe,WAAW,KAAK,UAAU,aAAa;AAAA,UACxF,MAAM,OAAO,KAAK,UAAU,SAAS,WAAW,KAAK,UAAU,OAAO;AAAA,UACtE,UAAU,OAAO,KAAK,UAAU,aAAa,WAAW,KAAK,UAAU,WAAW;AAAA,QACtF,CAAC,EAAE,MAAM,CAAC,UAAU;AAChB,eAAK,QAAQ,IAAI,KAAK,gBAAgB,KAAK,cAAc,sCAAsC,KAAK,cAAc,UAAU,OAAO;AAAA,QACvI,CAAC;AAED,oBAAY;AAAA,MAChB;AAEA,aAAO;AAAA,IACX;AAAA,IAEA,MAAa,gBAA+B;AACxC,YAAM,UAAU,KAAK,QAAQ;AAE7B,YAAM,KAAK,QAAQ,wBAAwB,QAAQ,gBAAgB;AAAA,QAC/D,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,MAAM;AAAA,YACF,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YAEJ,SAAS;AAAA,UACb;AAAA,UACA,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,KAAK;AAAA,QACT;AAAA,QACA,QAAQ;AAAA,UACJ,WAAW;AAAA,QACf;AAAA,MACJ,CAAC;AAED,YAAM,KAAK,QAAQ,wBAAwB,QAAQ,qBAAqB;AAAA,QACpE,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,MAAM;AAAA,YACF,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YAEJ,SAAS;AAAA,UACb;AAAA,UACA,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,KAAK;AAAA,QACT;AAAA,QACA,QAAQ;AAAA,UACJ,WAAW;AAAA,QACf;AAAA,MACJ,CAAC;AAED,YAAM,KAAK,QAAQ,wBAAwB,QAAQ,2BAA2B;AAAA,QAC1E,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,MAAM;AAAA,YACF,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YAEJ,SAAS;AAAA,UACb;AAAA,UACA,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,KAAK;AAAA,QACT;AAAA,QACA,QAAQ;AAAA,UACJ,WAAW;AAAA,QACf;AAAA,MACJ,CAAC;AAED,YAAM,KAAK,QAAQ,wBAAwB,QAAQ,gBAAgB;AAAA,QAC/D,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,MAAM;AAAA,YACF,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YAEJ,SAAS;AAAA,UACb;AAAA,UACA,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,KAAK;AAAA,QACT;AAAA,QACA,QAAQ;AAAA,UACJ,WAAW;AAAA,QACf;AAAA,MACJ,CAAC;AAED,YAAM,KAAK,QAAQ,wBAAwB,QAAQ,oBAAoB;AAAA,QACnE,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,MAAM;AAAA,YACF,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YAEJ,SAAS;AAAA,UACb;AAAA,UACA,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,KAAK;AAAA,QACT;AAAA,QACA,QAAQ;AAAA,UACJ,WAAW;AAAA,QACf;AAAA,MACJ,CAAC;AAED,aAAO,MAAM,cAAc;AAAA,IAC/B;AAAA,IAEA,MAAyB,aAAa,IAAY,OAAyD;AA7MnH;AA8MY,YAAM,gBAAgB,KAAK,QAAQ,gBAAgB,EAAE;AACrD,YAAM,UAAU,KAAK,QAAQ;AAG7B,UAAI,MAAM,SAAS,CAAC,MAAM,KAAK;AAC3B,YAAI,cAAc,WAAW,QAAQ,UAAU,GAAG;AAC9C,gBAAM,MAAM,MAAM,KAAK,QAAQ,eAAe,aAAa;AAE3D,cAAI,SAAO,gCAAK,WAAL,mBAAa,YAAW;AAC/B,kBAAM,OAAO,IAAI,OAAO;AACxB,gBAAI,KAAK,UAAU,UAAU,MAAM,KAAK;AACpC,mBAAK,QAAQ,IAAI,MAAM,6CAA6C,cAAc,MAAM,UAAS,gCAAK,WAAL,mBAAa,YAAY;AAE1H,mBAAK,UAAU,QAAQ,MAAM;AAE7B,kBAAI,CAAC,KAAK,gBAAgB;AACtB,qBAAK,iBAAiB,KAAK,QAAQ,WAAW,YAAY;AACtD,uBAAK,iBAAiB;AAEtB,sBAAI,MAAM,KAAK,QAAQ,GAAG;AACtB,0BAAM,KAAK,QAAQ,cAAc,eAAe,EAAE,KAAK,MAAM,KAAK,KAAK,KAAK,CAAC;AAAA,kBACjF;AAAA,gBACJ,GAAG,GAAG;AAAA,cACV,OAAO;AACH,sBAAM,KAAK,QAAQ,cAAc,eAAe,EAAE,KAAK,MAAM,KAAK,KAAK,KAAK,CAAC;AAAA,cACjF;AAAA,YACJ,OAAO;AACH,mBAAK,QAAQ,IAAI,MAAM,6CAA6C,oCAAoC,MAAM,UAAS,gCAAK,WAAL,mBAAa,YAAY;AAAA,YACpJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAzOO,EAAAD,SAAM;AAAA,GADA;",
  "names": ["AppType", "AbstractAppType"]
}
