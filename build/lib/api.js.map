{
  "version": 3,
  "sources": ["../../src/lib/api.ts"],
  "sourcesContent": ["import axios, { AxiosResponse } from 'axios';\nimport { AwtrixLight } from '../main';\n\nexport namespace AwtrixApi {\n    export type App = {\n        text?: string;\n        textCase?: number;\n        topText?: boolean;\n        textOffset?: number;\n        center?: boolean;\n        color?: string;\n        gradient?: string;\n        blinkText?: number;\n        fadeText?: number;\n        background?: string;\n        rainbow?: boolean;\n        icon?: string;\n        pushIcon?: number;\n        repeat?: number;\n        duration?: number;\n        bar?: Array<number>;\n        line?: Array<number>;\n        autoscale?: boolean;\n        progress?: number;\n        progressC?: string;\n        progressBC?: string;\n        pos?: number;\n        draw?: Array<object>;\n        lifetime?: number;\n        lifetimeMode?: number;\n        noScroll?: boolean;\n        scrollSpeed?: number;\n        effect?: string;\n        effectSettings?: Array<object>;\n        save?: boolean;\n    };\n\n    export type Settings = {\n        key: string;\n        value: any;\n    };\n\n    export type Indicator = {\n        color?: string;\n        blink?: number;\n    };\n\n    export type Moodlight = {\n        brightness?: number;\n        color?: string;\n    };\n\n    export class Client {\n        private adapter: AwtrixLight;\n\n        private ipAddress: string;\n        private port: number;\n        private httpTimeout: number;\n\n        private apiConnected: boolean;\n        private auth: axios.AxiosBasicCredentials | undefined;\n\n        private lastErrorCode: number;\n\n        public constructor(adapter: AwtrixLight, ipAddress: string, port: number, httpTimeout: number, userName: string, userPassword: string) {\n            this.adapter = adapter;\n\n            this.ipAddress = ipAddress;\n            this.port = port;\n            this.httpTimeout = httpTimeout;\n\n            this.adapter.log.info(`Starting - connecting to http://${this.ipAddress}:${this.port}/`);\n\n            this.apiConnected = false;\n\n            if (userName) {\n                this.auth = {\n                    username: userName,\n                    password: userPassword,\n                };\n            }\n\n            this.lastErrorCode = -1;\n        }\n\n        public isConnected(): boolean {\n            return this.apiConnected;\n        }\n\n        public async getStatsAsync(): Promise<any> {\n            return new Promise<any>((resolve, reject) => {\n                this.requestAsync('stats', 'GET')\n                    .then(async (response) => {\n                        if (response.status === 200) {\n                            this.apiConnected = true;\n                            resolve(response.data);\n                        } else {\n                            reject(response);\n                        }\n                    })\n                    .catch((error) => {\n                        this.apiConnected = false;\n                        reject(error);\n                    });\n            });\n        }\n\n        public async removeAppAsync(name: string): Promise<boolean> {\n            return new Promise<boolean>((resolve, reject) => {\n                if (this.apiConnected) {\n                    this.appRequestAsync(name)\n                        .then((response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                this.adapter.log.debug(`[removeApp] Removed customApp app \"${name}\"`);\n                                resolve(true);\n                            } else {\n                                reject(`${response.status}: ${response.data}`);\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    reject('API not connected');\n                }\n            });\n        }\n\n        public async settingsRequestAsync(data: AwtrixApi.Settings): Promise<AxiosResponse> {\n            return this.requestAsync('settings', 'POST', { [data.key]: data.value });\n        }\n\n        public async appRequestAsync(name: string, data?: AwtrixApi.App): Promise<AxiosResponse> {\n            return this.requestAsync(`custom?name=${name}`, 'POST', data);\n        }\n\n        public async requestAsync(service: string, method?: string, data?: object | string): Promise<AxiosResponse> {\n            return new Promise<AxiosResponse>((resolve, reject) => {\n                const url = `/api/${service}`;\n                const timeout = this.httpTimeout * 1000 || 3000;\n\n                if (this.ipAddress) {\n                    if (data) {\n                        this.adapter.log.debug(`sending \"${method}\" request to \"${url}\" with data: ${JSON.stringify(data)}`);\n                    } else {\n                        this.adapter.log.debug(`sending \"${method}\" request to \"${url}\" without data`);\n                    }\n\n                    axios({\n                        method,\n                        data,\n                        baseURL: `http://${this.ipAddress}:${this.port}`,\n                        url,\n                        timeout,\n                        auth: this.auth,\n                        validateStatus: (status) => {\n                            return [200, 201].indexOf(status) > -1;\n                        },\n                        responseType: 'json',\n                        headers: {\n                            'Content-Type': typeof data === 'string' ? 'text/plain' : 'application/json',\n                        },\n                    })\n                        .then((response) => {\n                            this.adapter.log.debug(`received ${response.status} response from \"${url}\" with content: ${JSON.stringify(response.data)}`);\n\n                            // no error - clear up reminder\n                            this.lastErrorCode = -1;\n\n                            resolve(response);\n                        })\n                        .catch((error) => {\n                            if (error.response) {\n                                // The request was made and the server responded with a status code\n\n                                if (error.response.status === 401) {\n                                    this.adapter.log.warn('Unable to perform request. Looks like the device is protected with username / password. Check instance configuration!');\n                                } else {\n                                    this.adapter.log.warn(`received ${error.response.status} response from ${url} with content: ${JSON.stringify(error.response.data)}`);\n                                }\n                            } else if (error.request) {\n                                // The request was made but no response was received\n                                // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n                                // http.ClientRequest in node.js\n\n                                // avoid spamming of the same error when stuck in a reconnection loop\n                                if (error.code === this.lastErrorCode) {\n                                    this.adapter.log.debug(error.message);\n                                } else {\n                                    this.adapter.log.info(`error ${error.code} from ${url}: ${error.message}`);\n                                    this.lastErrorCode = error.code;\n                                }\n                            } else {\n                                // Something happened in setting up the request that triggered an Error\n                                this.adapter.log.error(error.message);\n                            }\n\n                            reject(error);\n                        });\n                } else {\n                    reject('Device IP is not configured');\n                }\n            });\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["AwtrixApi", "axios"]
}
